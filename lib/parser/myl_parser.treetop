# This file is a Parsing Expression Grammar (PEG) for the Koi
# programming language. It is interpreted by the PEG engine Treetop.

# More info on PEGs: http://en.wikipedia.org/wiki/Parsing_expression_grammar
# More info on Treetop: http://treetop.rubyforge.org/

grammar Myl
    rule block
        statement+ <Block>
    end
    rule statement
        space? expression space? <Statement>
    end

    rule expression
        space? (flow_control / assignment / comparative / additive) '.'? function_call? <Expression>
    end

# LITERALS
    rule true
        'true' <TrueLiteral>
    end

    rule false
        'false' <FalseLiteral>
    end

    rule nil
        'nil' <NilLiteral>
    end

    rule integer
        ('-')? [0-9]+ <IntegerLiteral>
    end

    rule float
        ('-')? [0-9]+ '.' [0-9]+ <FloatLiteral>
    end

    rule string
        '"' ([^"\\] / "\\" . )* '"' <StringLiteral>
    end

    rule identifier
        [a-zA-Z] [a-zA-Z0-9_]* ('?' / '!')? <Identifier>
    end

#END LITERALS

#FUNCTION CALL
rule function_call
    identifier '(' space? expression? space? ','? expression? space? ')' <FunctionCall>
end
#END FUNCTION CALL

# FLOW CONTROL
rule flow_control
    unless / if
end

rule if
    'if' '('? space? expression space? ')'? space? '{'? space? block space? '}'? <If>
end

rule unless
    'unless' '('? space? expression space? ')'? space? '{'? space? block space? '}'? <Unless>
end
# END FLOW CONTROL

# ASSIGNMENT
rule assignment
    identifier space? assignment_operator space? expression <Assignment>
end

rule assignment_operator
    '=' <AssignmentOperator>
end

#END ASSIGNMENT

# MATH
    rule comparative
        primary space? comparative_operator space? primary <ComparativeExpression>
    end
    rule additive
        multitive space? additive_operator space? additive  <AdditiveExpression>
        /
        multitive
    end

    rule multitive
        primary space? multitive_operator space? multitive <MultitiveExpression>
        /
        primary
    end

    rule primary
        (function_call / nil / true / false / identifier / float / integer / string)
        /
        '(' expression ')' <Expression>
    end
# END MATH

# OPERATOR
    rule comparative_operator
        equality_operator / inequality_operator / greater_than_operator / less_than_operator
    end
    rule equality_operator
        '==' <EqualityOperator>
    end

    rule inequality_operator
        '!=' <InEqualityOperator>
    end

    rule greater_than_operator
        '>' <GreaterThanOperator>
    end

    rule less_than_operator
        '<' <LessThanOperator>
    end

    rule multitive_operator
        multiplication_operator / division_operator
    end

    rule multiplication_operator
        '*' <MultiplicationOperator>
    end

    rule division_operator
        '/' <DivisionOperator>
    end

    rule additive_operator
        addition_operator / subtraction_operator
    end

    rule subtraction_operator
        '-' <SubtractionOperator>
    end

    rule addition_operator
        '+' <AdditionOperator>
    end
# END OPERATOR
    rule space
        [\s]
    end
end
